let SessionLoad = 1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/repos/neural-networks/cpp
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +155 main.cpp
badd +1 term://.//7115:/bin/bash
badd +137 src/data_handler.cpp
badd +55 src/data.cpp
badd +2 src/basic_neural_net.cpp
badd +33 include/basic_neural_net.hpp
badd +20 test_neural_net.sh
badd +13 compile_and_run.sh
badd +38 include/data.hpp
badd +101 ~/repos/useful-stuff/topics/other/ideas.txt
badd +41 ~/repos/useful-stuff/topics/cpp/test.cpp
badd +0 include/data_handler.hpp
badd +416 ~/repos/useful-stuff/dotfiles/config.vim
badd +0 term://.//195150:/bin/bash
badd +2 ~/repos/neural-networks/.gitignore
badd +0 term://.//230609:/bin/bash
argglobal
%argdel
set stal=2
edit main.cpp
set splitbelow splitright
wincmd _ | wincmd |
split
1wincmd k
wincmd w
set nosplitbelow
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 43 + 29) / 59)
exe '2resize ' . ((&lines * 12 + 29) / 59)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 134 - ((26 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
134
normal! 0
wincmd w
argglobal
if bufexists("term://.//195150:/bin/bash") | buffer term://.//195150:/bin/bash | else | edit term://.//195150:/bin/bash | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 28 - ((11 * winheight(0) + 6) / 12)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
28
normal! 0
wincmd w
exe '1resize ' . ((&lines * 43 + 29) / 59)
exe '2resize ' . ((&lines * 12 + 29) / 59)
tabedit include/data_handler.hpp
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd w
set nosplitbelow
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 18 + 29) / 59)
exe 'vert 1resize ' . ((&columns * 103 + 106) / 213)
exe '2resize ' . ((&lines * 37 + 29) / 59)
exe 'vert 2resize ' . ((&columns * 103 + 106) / 213)
exe '3resize ' . ((&lines * 18 + 29) / 59)
exe 'vert 3resize ' . ((&columns * 109 + 106) / 213)
exe '4resize ' . ((&lines * 37 + 29) / 59)
exe 'vert 4resize ' . ((&columns * 109 + 106) / 213)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 1 - ((0 * winheight(0) + 9) / 18)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
1
normal! 0
wincmd w
argglobal
if bufexists("src/data_handler.cpp") | buffer src/data_handler.cpp | else | edit src/data_handler.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 47 - ((1 * winheight(0) + 18) / 37)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
47
normal! 0
wincmd w
argglobal
if bufexists("include/data.hpp") | buffer include/data.hpp | else | edit include/data.hpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 41 - ((16 * winheight(0) + 9) / 18)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
41
normal! 0
wincmd w
argglobal
if bufexists("src/data.cpp") | buffer src/data.cpp | else | edit src/data.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 46 - ((0 * winheight(0) + 18) / 37)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
46
normal! 014|
wincmd w
exe '1resize ' . ((&lines * 18 + 29) / 59)
exe 'vert 1resize ' . ((&columns * 103 + 106) / 213)
exe '2resize ' . ((&lines * 37 + 29) / 59)
exe 'vert 2resize ' . ((&columns * 103 + 106) / 213)
exe '3resize ' . ((&lines * 18 + 29) / 59)
exe 'vert 3resize ' . ((&columns * 109 + 106) / 213)
exe '4resize ' . ((&lines * 37 + 29) / 59)
exe 'vert 4resize ' . ((&columns * 109 + 106) / 213)
tabedit include/basic_neural_net.hpp
set splitbelow splitright
wincmd _ | wincmd |
split
wincmd _ | wincmd |
split
2wincmd k
wincmd w
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
wincmd w
set nosplitbelow
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 18 + 29) / 59)
exe '2resize ' . ((&lines * 26 + 29) / 59)
exe 'vert 2resize ' . ((&columns * 109 + 106) / 213)
exe '3resize ' . ((&lines * 26 + 29) / 59)
exe 'vert 3resize ' . ((&columns * 103 + 106) / 213)
exe '4resize ' . ((&lines * 10 + 29) / 59)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 47 - ((17 * winheight(0) + 9) / 18)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
47
normal! 0
wincmd w
argglobal
if bufexists("src/basic_neural_net.cpp") | buffer src/basic_neural_net.cpp | else | edit src/basic_neural_net.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 119 - ((0 * winheight(0) + 13) / 26)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
119
normal! 0
wincmd w
argglobal
if bufexists("main.cpp") | buffer main.cpp | else | edit main.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 140 - ((25 * winheight(0) + 13) / 26)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
140
normal! 024|
wincmd w
argglobal
if bufexists("term://.//230609:/bin/bash") | buffer term://.//230609:/bin/bash | else | edit term://.//230609:/bin/bash | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
let s:l = 265 - ((9 * winheight(0) + 5) / 10)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
265
normal! 050|
wincmd w
2wincmd w
exe '1resize ' . ((&lines * 18 + 29) / 59)
exe '2resize ' . ((&lines * 26 + 29) / 59)
exe 'vert 2resize ' . ((&columns * 109 + 106) / 213)
exe '3resize ' . ((&lines * 26 + 29) / 59)
exe 'vert 3resize ' . ((&columns * 103 + 106) / 213)
exe '4resize ' . ((&lines * 10 + 29) / 59)
tabedit include/data.hpp
set splitbelow splitright
wincmd _ | wincmd |
split
1wincmd k
wincmd w
set nosplitbelow
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 15 + 29) / 59)
exe '2resize ' . ((&lines * 40 + 29) / 59)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 24 - ((3 * winheight(0) + 7) / 15)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
24
normal! 05|
wincmd w
argglobal
if bufexists("src/data.cpp") | buffer src/data.cpp | else | edit src/data.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 71 - ((39 * winheight(0) + 20) / 40)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
71
normal! 0
wincmd w
exe '1resize ' . ((&lines * 15 + 29) / 59)
exe '2resize ' . ((&lines * 40 + 29) / 59)
tabnext 3
set stal=1
if exists('s:wipebuf') && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 winminheight=1 winminwidth=1 shortmess=filnxtToOF
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
