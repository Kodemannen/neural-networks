let SessionLoad = 1
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/repos/neural-networks/cpp
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +198 main.cpp
badd +1 term://.//7115:/bin/bash
badd +266 src/data_handler.cpp
badd +46 src/data.cpp
badd +278 src/basic_neural_net.cpp
badd +43 include/basic_neural_net.hpp
badd +20 test_neural_net.sh
badd +1 compile_and_run.sh
badd +41 include/data.hpp
badd +101 ~/repos/useful-stuff/topics/other/ideas.txt
badd +41 ~/repos/useful-stuff/topics/cpp/test.cpp
badd +39 include/data_handler.hpp
badd +747 ~/repos/useful-stuff/dotfiles/config.vim
badd +3 ~/repos/neural-networks/.gitignore
badd +22 term://.//22292:/bin/bash
badd +574 ~/repos/useful-stuff/topics/cpp/notes.cpp
badd +0 asd
argglobal
%argdel
set stal=2
edit main.cpp
set splitbelow splitright
set nosplitbelow
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 267 - ((15 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
267
normal! 06|
tabedit include/basic_neural_net.hpp
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd w
set nosplitbelow
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 14 + 23) / 46)
exe 'vert 1resize ' . ((&columns * 105 + 106) / 212)
exe '2resize ' . ((&lines * 28 + 23) / 46)
exe 'vert 2resize ' . ((&columns * 105 + 106) / 212)
exe 'vert 3resize ' . ((&columns * 106 + 106) / 212)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 46 - ((8 * winheight(0) + 7) / 14)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
46
normal! 028|
wincmd w
argglobal
if bufexists("src/basic_neural_net.cpp") | buffer src/basic_neural_net.cpp | else | edit src/basic_neural_net.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 278 - ((15 * winheight(0) + 14) / 28)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
278
normal! 013|
wincmd w
argglobal
if bufexists("main.cpp") | buffer main.cpp | else | edit main.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 238 - ((15 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
238
normal! 05|
wincmd w
3wincmd w
exe '1resize ' . ((&lines * 14 + 23) / 46)
exe 'vert 1resize ' . ((&columns * 105 + 106) / 212)
exe '2resize ' . ((&lines * 28 + 23) / 46)
exe 'vert 2resize ' . ((&columns * 105 + 106) / 212)
exe 'vert 3resize ' . ((&columns * 106 + 106) / 212)
tabedit include/data_handler.hpp
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd w
set nosplitbelow
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 14 + 23) / 46)
exe 'vert 1resize ' . ((&columns * 102 + 106) / 212)
exe '2resize ' . ((&lines * 28 + 23) / 46)
exe 'vert 2resize ' . ((&columns * 102 + 106) / 212)
exe 'vert 3resize ' . ((&columns * 109 + 106) / 212)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 13 - ((11 * winheight(0) + 7) / 14)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
13
normal! 020|
wincmd w
argglobal
if bufexists("src/data_handler.cpp") | buffer src/data_handler.cpp | else | edit src/data_handler.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 256 - ((27 * winheight(0) + 14) / 28)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
256
normal! 02|
wincmd w
argglobal
if bufexists("main.cpp") | buffer main.cpp | else | edit main.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 307 - ((20 * winheight(0) + 21) / 43)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
307
normal! 05|
wincmd w
exe '1resize ' . ((&lines * 14 + 23) / 46)
exe 'vert 1resize ' . ((&columns * 102 + 106) / 212)
exe '2resize ' . ((&lines * 28 + 23) / 46)
exe 'vert 2resize ' . ((&columns * 102 + 106) / 212)
exe 'vert 3resize ' . ((&columns * 109 + 106) / 212)
tabedit include/data.hpp
set splitbelow splitright
wincmd _ | wincmd |
split
1wincmd k
wincmd w
set nosplitbelow
wincmd t
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 15 + 23) / 46)
exe '2resize ' . ((&lines * 29 + 23) / 46)
argglobal
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 29 - ((14 * winheight(0) + 7) / 15)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
29
normal! 06|
wincmd w
argglobal
if bufexists("src/data.cpp") | buffer src/data.cpp | else | edit src/data.cpp | endif
setlocal fdm=manual
setlocal fde=0
setlocal fmr={{{,}}}
setlocal fdi=#
setlocal fdl=0
setlocal fml=1
setlocal fdn=20
setlocal fen
silent! normal! zE
let s:l = 17 - ((1 * winheight(0) + 14) / 29)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
17
normal! 0
wincmd w
exe '1resize ' . ((&lines * 15 + 23) / 46)
exe '2resize ' . ((&lines * 29 + 23) / 46)
tabnext 2
set stal=1
if exists('s:wipebuf') && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 winminheight=1 winminwidth=1 shortmess=filnxtToOF
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
